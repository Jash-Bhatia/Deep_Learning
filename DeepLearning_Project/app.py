# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WORDzMSyYvCPmxnme0r9jkf4PswHffRv
"""

from __future__ import division, print_function
# coding=utf-8
import sys
import os
import glob
import re
import numpy as np

# Keras
from tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import keras
import tensorflow as tf

# Flask utils

!pip install gevent
!pip install flask-ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask, redirect, url_for, request, render_template
from werkzeug.utils import secure_filename
from gevent.pywsgi import WSGIServer

procfile = 'web: gunicorn app:app'
procfiles= open("/content/Procfile","w")
procfiles.write(procfile)
procfiles.close()

model = load_mymodel()
model

# Define a flask app
app = Flask(__name__)
run_with_ngrok(app)
app.config['UPLOADS'] = 'uploads'


def load_mymodel():
    global mymodel
    global final_model
    mymodel = keras.models.load_model('/content/drive/MyDrive/bird_model_weights.h5')
    final_model = tf.keras.Sequential([
                                   mymodel,
                                   tf.keras.layers.Softmax()
    ])
    return final_model


def model_predict(img_path, model):
    img = image.load_img(img_path, target_size=(224, 224))

    # Preprocessing the image
    x = image.img_to_array(img)
    # x = np.true_divide(x, 255)
    x = np.expand_dims(x, axis=0)

    x = preprocess_input(x)

    preds = model.predict(x)
    return preds


@app.route('/', methods=['GET'])
def index():
    # Main page
    return render_template('index.html')


@app.route('/predict', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Get the file from post request
        f = request.files['file']

        # Save the file to ./uploads
        basepath = os.path.dirname('/content')
        file_path = os.path.join(
            app.config['UPLOADS'], secure_filename(f.filename))
        f.save(file_path)

        # Make prediction
        preds = str(model_predict(file_path, final_model))
        demo = 'demo output'


        return preds
    return None


if __name__ == '__main__':
    load_mymodel()
    app.run()



